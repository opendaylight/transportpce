[tox]
minversion = 3.7.0
envlist = buildcontroller,testsPCE,
    sims121,build_karaf_tests121,tests121,
    sims221,build_karaf_tests221,tests221,tests_tapi,
    sims71,build_karaf_tests71,tests71,
    build_karaf_tests_hybrid,tests_hybrid,
    docs
    docs-linkcheck
    checkbashisms
    pre-commit
    gitlint
    pylint
skipsdist = true
setupdir = tests/

[testenv]
passenv = USE_LIGHTY http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY OLM_TIMER1 OLM_TIMER2
setenv =
    USE_LIGHTY=True
    OLM_TIMER1=3000
    OLM_TIMER2=2000

usedevelop = true
basepython = python3
deps =
  -r{toxinidir}/tests/requirements.txt
  -r{toxinidir}/tests/test-requirements.txt
  setuptools>=7.0
changedir = {toxinidir}/tests
parallel_show_output = true

[testenv:buildcontroller]
whitelist_externals = build_controller.sh
commands =
  ./build_controller.sh

[testenv:sims121]
whitelist_externals = install_honeynode.sh
depends = buildcontroller
# sims profiles does not strictly depends on buildcontroller
# but this dependency avoids race condition in the gate
commands =
  ./install_honeynode.sh 1.2.1

[testenv:sims221]
whitelist_externals = install_honeynode.sh
depends = buildcontroller
commands =
  ./install_honeynode.sh 2.2.1

[testenv:sims71]
whitelist_externals = install_honeynode.sh
depends = buildcontroller
commands =
  ./install_honeynode.sh 7.1

[testenv:testsPCE]
depends = buildcontroller
#the following lines retrieve unofficial package of GNPy with REST support from Orange opensource Gitlab repo
setenv =
  PIP_EXTRA_INDEX_URL = https://gitlab.com/api/v4/projects/33090323/packages/pypi/simple
deps =
  -r{toxinidir}/tests/requirements.txt
  -r{toxinidir}/tests/test-requirements.txt
  setuptools>=7.0
  gnpy4tpce==2.4.7
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY USE_ODL_RESTCONF_VERSION
basepython = python3.8
#setenv =
#    USE_LIGHTY=True
commands =
  ./launch_tests.sh pce {posargs:}

[testenv:build_karaf_tests121]
depends = buildcontroller
# testsPCE dependency is only here to chain tests in the gate and avoid resources starvation
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY
setenv =
    USE_LIGHTY=True
    USE_ODL_ALT_KARAF_ENV=./karaf121.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf121
commands =
  ./build_karaf_for_tests.sh

[testenv:tests121]
depends = buildcontroller,build_karaf_tests121,sims121,testsPCE
# testsPCE dependency is only here to chain tests in the gate and avoid resources starvation
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY USE_ODL_RESTCONF_VERSION
setenv =
    USE_LIGHTY=True
    USE_ODL_RESTCONF_VERSION=draft-bierman02
    USE_ODL_ALT_KARAF_ENV=./karaf121.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf121
commands =
  ./launch_tests.sh 1.2.1 {posargs:}
# By default, all tests in the folder transportpce_tests/1.2.1/ are run.
# Though, a restricted list of tests can be passed as argument to 'tox -e tests121'.
# For example, 'tox -e tests121 portmapping' will run only the portmapping test.
# and 'tox -e tests121 "portmapping pce"' will run the portmapping and pce tests.
# Additionnally, a different launcher command than 'nosetests --with-xunit' can be
# used by exporting the variable LAUNCHER. For example 'export LAUNCHER="python3"'
# which is more verbose than nose or 'export LAUNCHER="ls -l"' to only list script
# files attributes.

[testenv:build_karaf_tests221]
depends = buildcontroller
# testsPCE dependency is only here to chain tests in the gate and avoid resources starvation
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY
setenv =
    USE_LIGHTY=True
    USE_ODL_ALT_KARAF_ENV=./karaf221.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf221
commands =
  ./build_karaf_for_tests.sh

[testenv:tests221]
depends = buildcontroller,build_karaf_tests221,sims221,tests71
# tests71 dependency is only here to chain tests in the gate and avoid ressources starvation
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY USE_ODL_RESTCONF_VERSION
setenv =
    USE_LIGHTY=True
    USE_ODL_RESTCONF_VERSION=draft-bierman02
    USE_ODL_ALT_KARAF_ENV=./karaf221.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf221
commands =
  ./launch_tests.sh 2.2.1 {posargs:}

[testenv:build_karaf_tests71]
depends = buildcontroller
# testsPCE dependency is only here to chain tests in the gate and avoid resources starvation
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY
setenv =
    USE_LIGHTY=True
    USE_ODL_ALT_KARAF_ENV=./karaf71.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf71
commands =
  ./build_karaf_for_tests.sh

[testenv:tests71]
depends = buildcontroller,build_karaf_tests71,sims71,tests_tapi
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY USE_ODL_RESTCONF_VERSION
setenv =
    USE_LIGHTY=True
    USE_ODL_RESTCONF_VERSION=draft-bierman02
    USE_ODL_ALT_KARAF_ENV=./karaf71.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf71
commands =
  ./launch_tests.sh 7.1 {posargs:}

[testenv:build_karaf_tests_hybrid]
depends = buildcontroller
# testsPCE dependency is only here to chain tests in the gate and avoid resources starvation
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY
setenv =
    USE_LIGHTY=True
    USE_ODL_ALT_KARAF_ENV=./karaf121.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf_hybrid
commands =
  ./build_karaf_for_tests.sh

[testenv:tests_hybrid]
depends = buildcontroller,build_karaf_tests_hybrid,sims121,sims221,sims71,tests121,tests221,tests71
#the last dependency is to avoid temporarily concurrent ressources problem in parallel mode
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY USE_ODL_RESTCONF_VERSION
setenv =
    USE_LIGHTY=True
    USE_ODL_ALT_KARAF_ENV=./karaf121.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf_hybrid
commands =
#  nosetests --with-xunit transportpce_tests/hybrid/test01_device_change_notifications.py
  ./launch_tests.sh hybrid {posargs:}

[testenv:tests_tapi]
depends = buildcontroller,build_karaf_tests221,sims221
whitelist_externals = launch_tests.sh
passenv = LAUNCHER USE_LIGHTY OLM_TIMER1 OLM_TIMER2 USE_ODL_RESTCONF_VERSION
setenv =
    USE_LIGHTY=True
    USE_ODL_RESTCONF_VERSION=draft-bierman02
    USE_ODL_ALT_KARAF_ENV=./karaf221.env
    USE_ODL_ALT_KARAF_INSTALL_DIR=karaf221
    INSTALL_TAPI=True
    OLM_TIMER1=3000
    OLM_TIMER2=2000

commands =
  ./launch_tests.sh tapi {posargs:}

[testenv:nbinotifications]
depends = buildcontroller,sims221
whitelist_externals = launch_tests.sh
                      dockercmd.sh
passenv = LAUNCHER USE_LIGHTY USE_ODL_RESTCONF_VERSION OLM_TIMER1 OLM_TIMER2
setenv =
    OLM_TIMER1=3000
    OLM_TIMER2=2000
    INSTALL_NBINOTIFICATIONS=True

commands =
  ./dockercmd.sh run -d -p 2181:2181 -p 9092:9092 --env ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 --name tpce_kafka1 teivah/kafka:2.0.0
  ./launch_tests.sh with_docker nbinotifications
  ./dockercmd.sh container rm -f tpce_kafka1

[testenv:docs]
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY
basepython = python3
deps = -rdocs/requirements.txt
commands =
    sphinx-build -q -W --keep-going -b html -n -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/html

[testenv:docs-linkcheck]
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY
basepython = python3
deps = -rdocs/requirements.txt
commands = sphinx-build -q -b linkcheck -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/linkcheck

[testenv:checkbashisms]
deps =
whitelist_externals = sh
                      checkbashisms
                      sudo
                      find
commands =
    sh -c 'command checkbashisms>/dev/null || sudo yum install devscripts-minimal || (echo "checkbashisms command not found - please install it (e.g. sudo apt-get install devscripts | yum install devscripts-minimal )" >&2 && exit 1)'
    find . -not -path '*/\.*' -name *.sh -exec checkbashisms -f  \{\} +

[testenv:spelling]
basepython = python3
deps =
    -rdocs/requirements.txt
    sphinxcontrib-spelling
    PyEnchant
commands = sphinx-build -b spelling -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/spelling

[testenv:autopep8]
basepython = python3
deps = autopep8
commands =
    autopep8 --max-line-length 120 --in-place --recursive transportpce_tests/

[testenv:pylint_full]
basepython = python3
deps = pylint>=2.6.0
whitelist_externals = find
commands =
    find transportpce_tests/ -name *.py -exec pylint --fail-under=9.22 --max-line-length=120 --disable=missing-docstring --module-rgx="([a-z0-9_]+$)|([0-9.]{1,30}$)" --method-rgx="(([a-z_][a-zA-Z0-9_]{2,})|(_[a-z0-9_]*)|(__[a-zA-Z][a-zA-Z0-9_]+__))$" --variable-rgx="[a-zA-Z_][a-zA-Z0-9_]{1,30}$" --reports=y --score=y  --output-format=colorized  \{\} +

[testenv:pylint]
basepython = python3
deps = pylint>=2.6.0
whitelist_externals = find
commands =
    find transportpce_tests/ -name *.py -exec pylint --fail-under=10 --max-line-length=120 --disable=missing-docstring --disable=fixme --disable=duplicate-code --module-rgx="([a-z0-9_]+$)|([0-9.]{1,30}$)" --method-rgx="(([a-z_][a-zA-Z0-9_]{2,})|(_[a-z0-9_]*)|(__[a-zA-Z][a-zA-Z0-9_]+__))$" --variable-rgx="[a-zA-Z_][a-zA-Z0-9_]{1,30}$" \{\} +

[testenv:pyang]
basepython = python3
deps = pyang
whitelist_externals = find
commands =
    pyang --version
    find ../api/ -name target -prune -o -name *.yang -exec pyang --lint --canonical --max-line-length=120 -p../api/src/main/yang/:../ordmodels/common/src/main/yang/:../ordmodels/service/src/main/yang/:../tapimodels/src/main/yang/ \{\} +
#find ../api/ ../ordmodels/ ../tapimodels/ -name target -prune -o -name *.yang -exec pyang --lint --canonical --max-line-length=120 -p../api/src/main/yang/:../ordmodels/common/src/main/yang/:../ordmodels/service/src/main/yang/:../tapimodels/src/main/yang/ \{\} +

[testenv:pyangformat]
basepython = python3
deps = pyang
whitelist_externals = sh
commands =
    pyang --version
    sh -c 'find ../api/ -name target -prune -o -name *.yang -print | while read -r fname; do pyang -f yang --yang-canonical --yang-remove-unused-imports --max-line-length=120 --keep-comments -p../api/src/main/yang/:../ordmodels/common/src/main/yang/:../ordmodels/service/src/main/yang/:../tapimodels/src/main/yang/ "$fname"  -o /tmp/tmpfile.$$ && mv /tmp/tmpfile.$$ "$fname";done'

[testenv:pre-commit-install]
basepython = python3
deps = pre-commit
commands =
    pre-commit install
    pre-commit install --hook-type commit-msg

[testenv:pre-commit-uninstall]
basepython = python3
deps = pre-commit
commands =
    pre-commit uninstall
    pre-commit uninstall --hook-type commit-msg

[testenv:pre-commit-autoupdate]
basepython = python3
deps = pre-commit
commands =
    pre-commit autoupdate

[testenv:pre-commit]
basepython = python3
deps = pre-commit
passenv = HOME
commands =
    pre-commit run --all-files --show-diff-on-failure
    pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG
    # Gitlint only proposes a pre-commit configuration for the commit-msg stage but none for the commit stage.
    # Its default arguments --passed and --msg-filename are different from CI recommandations.
    # As a result, the line above is always skipped in jenkins CI since there cannot be a .git/COMMIT_EDITMSG file.
    # A dedicated gitlint profile for CI is proposed below. Also to behave fine locally, this profile must have access
    # to the HOME variable so that Gitlint can retrieve Git user settings.

[testenv:gitlint]
basepython = python3
deps = gitlint
commands =
    gitlint --config ../.gitlint

