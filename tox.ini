[tox]
minversion = 1.6
envlist = py3
    docs
    docs-linkcheck
skipsdist = true
setupdir = tests/

[testenv]
passenv = USE_LIGHTY
usedevelop = True
basepython = python3
deps =
  -r{toxinidir}/tests/requirements.txt
  -r{toxinidir}/tests/test-requirements.txt
whitelist_externals = sh
                      sudo
changedir={toxinidir}/tests
commands =
#install maven and JDK11 on the Gate since they are not there by default
  {py3,portmapping,topoPortMapping,rspn,topology,pce,olm,end2end,portmapping221,rspn221,otnrenderer,topology221,otntopology,olm221,end2end221,gnpy}: - sh -c "if [ ! `which mvn` ]; then ./installMavenCentOS.sh  ; fi"
#build 1.2.1 sims
  {py3,portmapping,topoPortMapping,rspn,topology,olm,end2end}: - sh -c "./buildHoneynode.sh"
#patch OLM constant to speed up tests, unnecessary for PCE
  {py3,portmapping,topoPortMapping,rspn,topology,olm,end2end,portmapping221,rspn221,otnrenderer,topology221,otn-topology,olm221,end2end221}: - sh -c "sed -i'_' 's@=.*//#FUNCTESTVAL=@=@g' ../olm/src/main/java/org/opendaylight/transportpce/olm/util/OlmUtils.java"
#build controller, source JDK_JAVA_OPTIONS to remove illegal reflective acces warnings introduced by Java11
  {py3,portmapping,topoPortMapping,rspn,topology,pce,olm,end2end,portmapping221,rspn221,otnrenderer,topology221,otntopology,olm221,end2end221,gnpy}: - sh -c ". $PWD/reflectwarn.sh && cd .. && mvn clean install -s tests/odl_settings.xml -DskipTests -Dmaven.javadoc.skip=true -Dodlparent.spotbugs.skip -Dodlparent.checkstyle.skip"
  {py3,portmapping,topoPortMapping,rspn,topology,olm,end2end,portmapping221,rspn221,otnrenderer,topology221,otn-topology,olm221,end2end221}: - sh -c "mv  ../olm/src/main/java/org/opendaylight/transportpce/olm/util/OlmUtils.java_  ../olm/src/main/java/org/opendaylight/transportpce/olm/util/OlmUtils.java"
#patch Karaf exec for the same reason at runtime
  {py3,portmapping,topoPortMapping,rspn,topology,pce,olm,end2end,portmapping221,rspn221,otnrenderer,topology221,otntopology,olm221,end2end221,gnpy}: - sh -c "sed -i'_' 's@!/bin/sh@!/bin/sh\'$'\n. $(dirname $0)/../../../../tests/reflectwarn.sh@' ../karaf/target/assembly/bin/karaf"
#build Lighty if needed
  {py3,portmapping,topoPortMapping,rspn,topology,pce,olm,end2end,portmapping221,rspn221,otnrenderer,topology221,otntopology,olm221,end2end221,gnpy}: - sh -c 'if [ "$USE_LIGHTY" = "True" ]; then (cd ../lighty && ./build.sh); fi'
#run 1.2.1 functional tests
  {py3,portmapping}: nosetests --with-xunit transportpce_tests/1.2.1/test_portmapping.py
  {py3,topoPortMapping}: nosetests --with-xunit transportpce_tests/1.2.1/test_topoPortMapping.py
  {py3,topology}: nosetests --with-xunit transportpce_tests/1.2.1/test_topology.py
  {py3,rspn}: nosetests --with-xunit transportpce_tests/1.2.1/test_renderer_service_path_nominal.py
  {py3,pce}: nosetests --with-xunit transportpce_tests/1.2.1/test_pce.py
  {py3,olm}: nosetests --with-xunit transportpce_tests/1.2.1/test_olm.py
  {end2end}: nosetests --with-xunit transportpce_tests/1.2.1/test_end2end.py
#build 2.2.1 sims
  {py3,portmapping221,rspn221,otnrenderer,topology221,otntopology,olm221,end2end221}: - sh -c "./buildHoneynode.sh 2.2.1"
#run 2.2.1 functional tests
  {py3,portmapping221}: nosetests --with-xunit transportpce_tests/2.2.1/test_portmapping.py
  {py3,topology221}: nosetests --with-xunit transportpce_tests/2.2.1/test_topology.py
  {otntopology}: nosetests --with-xunit transportpce_tests/2.2.1/test_otn_topology.py
  {py3,rspn221}: nosetests --with-xunit transportpce_tests/2.2.1/test_renderer_service_path_nominal.py
  {py3,otnrenderer}: nosetests --with-xunit transportpce_tests/2.2.1/test_otn_renderer.py
  {py3,olm221}: nosetests --with-xunit transportpce_tests/2.2.1/test_olm.py
  {end2end221}: nosetests --with-xunit transportpce_tests/2.2.1/test_end2end.py
  #{gnpy}: - sudo docker pull atriki/gnpyrest:v1.2
  {gnpy}: - sudo docker run -d -p 8008:5000 --name gnpy_tpce_rest1 atriki/gnpyrest:v1.2
  {gnpy}: nosetests --with-xunit transportpce_tests/1.2.1/test_gnpy.py
  {gnpy}: - sudo docker container rm -f gnpy_tpce_rest1

[testenv:docs]
basepython = python3
deps = -rdocs/requirements.txt
commands =
    sphinx-build -W -b html -n -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/html

[testenv:docs-linkcheck]
basepython = python3
deps = -rdocs/requirements.txt
commands = sphinx-build -W -b linkcheck -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/linkcheck

[testenv:autopep8]
basepython = python3
deps = autopep8
commands =
    autopep8 --max-line-length 120 --in-place --recursive transportpce_tests/

[testenv:pylint]
basepython = python3
deps = pylint
whitelist_externals = find
commands =
    find transportpce_tests/ -name *.py -exec pylint --max-line-length=120 --disable=missing-docstring  --reports=y --score=y  --output-format=colorized  \{\} +
