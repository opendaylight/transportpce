[tox]
minversion = 3.7.0
envlist = buildcontroller,sims121,tests121,sims221,tests221,sims71,tests71,tests_hybrid
    docs
    docs-linkcheck
    checkbashisms
    pre-commit
    gitlint
skipsdist = true
setupdir = tests/

[testenv]
passenv = USE_LIGHTY http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY
setenv =
    USE_LIGHTY = True
usedevelop = true
basepython = python3
deps =
  -r{toxinidir}/tests/requirements.txt
  -r{toxinidir}/tests/test-requirements.txt
  setuptools>=7.0
changedir = {toxinidir}/tests
parallel_show_output = true

[testenv:buildcontroller]
whitelist_externals = sh
                      sudo
commands =
#install maven and JDK11 on the Gate since they are not there by default
  sh -c "which mvn >/dev/null || ./installMavenCentOS.sh"
#install honeynode 1.2.1 simulators
#patch OLM constant to speed up tests, unnecessary for PCE tests
  sh -c "sed -i'_' 's@=.*//#FUNCTESTVAL=@=@g' ../olm/src/main/java/org/opendaylight/transportpce/olm/util/OlmUtils.java"
#build controller, source JDK_JAVA_OPTIONS to remove illegal reflective acces warnings introduced by Java11
  sh -c ". $PWD/reflectwarn.sh && cd .. && mvn clean install -B -q -s tests/odl_settings.xml -DskipTests -Dmaven.javadoc.skip=true -Dodlparent.spotbugs.skip -Dodlparent.checkstyle.skip"
  sh -c "mv  ../olm/src/main/java/org/opendaylight/transportpce/olm/util/OlmUtils.java_  ../olm/src/main/java/org/opendaylight/transportpce/olm/util/OlmUtils.java"
#patch Karaf exec for the same reason at runtime
  sh -c "sed -i'_' 's@!/bin/sh@!/bin/sh\'$'\n. $(dirname $0)/../../../../tests/reflectwarn.sh@' ../karaf/target/assembly/bin/karaf"
  # the following command would be the straight and right way to support both BSD and GNU sed versions
  # sh -c "sed -i'_' '1 a\'$'\n. \$(dirname \$0)/\.\./\.\./\.\./\.\./tests/reflectwarn.sh\n' ../karaf/target/assembly/bin/karaf"
  # but tox reinterprets the quotes as
  #Â sh -c 'sed -i'"'"'_'"'"' '"'"'1 a\'"'"'$'"'"'\n. \$(dirname \$0)/\.\./\.\./\.\./\.\./tests/reflectwarn.sh\n'"'"' ../karaf/target/assembly/bin/karaf'
  # ,what results in an unexpected different formating (with a $ on the second line and the dot on the third)
#build Lighty if needed
  sh -c 'if [ "$USE_LIGHTY" = "True" ]; then (cd ../lighty && ./build.sh); fi'

[testenv:sims121]
whitelist_externals = sh
depends = buildcontroller
# sims profiles does not strictly depends on buildcontroller
# but this dependency avoids race condition in the gate
commands =
  - sh -c "./install_honeynode.sh 1.2.1"

[testenv:sims221]
whitelist_externals = sh
depends = buildcontroller
commands =
  - sh -c "./install_honeynode.sh 2.2.1"

[testenv:sims71]
whitelist_externals = sh
depends = buildcontroller
commands =
  - sh -c "./install_honeynode.sh 7.1"

[testenv:tests121]
depends = buildcontroller,sims121
commands =
  nosetests --with-xunit transportpce_tests/1.2.1/test_portmapping.py
  nosetests --with-xunit transportpce_tests/1.2.1/test_topo_portmapping.py
  nosetests --with-xunit transportpce_tests/1.2.1/test_topology.py
  nosetests --with-xunit transportpce_tests/1.2.1/test_renderer_service_path_nominal.py
  nosetests --with-xunit transportpce_tests/1.2.1/test_pce.py
  nosetests --with-xunit transportpce_tests/1.2.1/test_olm.py
  nosetests --with-xunit transportpce_tests/1.2.1/test_end2end.py

[testenv:tests221]
depends = buildcontroller,sims221,tests121
#the last dependency is to avoid temporarily concurrent ressources problem to fix in parallel mode
commands =
  nosetests --with-xunit transportpce_tests/2.2.1/test_portmapping.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_topology.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_otn_topology.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_flex_grid.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_renderer_service_path_nominal.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_otn_renderer.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_otn_sh_renderer.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_olm.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_tapi.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_otn_end2end.py
  nosetests --with-xunit transportpce_tests/2.2.1/test_end2end.py

[testenv:tests71]
depends = buildcontroller,sims71,tests221
#the last dependency is to avoid temporarily concurrent ressources problem to fix in parallel mode
commands =
  nosetests --with-xunit transportpce_tests/7.1/test_pce_400G.py
  #NB: test pce_400G above does not depend on sims71
  nosetests --with-xunit transportpce_tests/7.1/test_portmapping.py

[testenv:tests_hybrid]
depends = buildcontroller,sims121,sims221,sims71,tests71
#the last dependency is to avoid temporarily concurrent ressources problem to fix in parallel mode
commands =
  nosetests --with-xunit transportpce_tests/hybrid/test_device_change_notifications.py

[testenv:gnpy]
depends = buildcontroller
whitelist_externals = sh
                      sudo
commands =
  #sudo docker pull atriki/gnpyrest:v1.2
  sudo docker run -d -p 8008:5000 --name gnpy_tpce_rest1 atriki/gnpyrest:v1.2
  nosetests --with-xunit transportpce_tests/with_docker/test_gnpy.py
  sudo docker container rm -f gnpy_tpce_rest1

[testenv:nbinotifications]
depends = buildcontroller,sims221
whitelist_externals = sh
                      sudo
commands =
  sudo docker-compose -f ./nbinotifications/docker-compose.yml up -d
  nosetests --with-xunit transportpce_tests/with_docker/test_nbinotifications.py
  sudo docker-compose -f ./nbinotifications/docker-compose.yml down --rmi all

[testenv:docs]
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY
basepython = python3
deps = -rdocs/requirements.txt
commands =
    sphinx-build -q -W -b html -n -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/html

[testenv:docs-linkcheck]
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY
basepython = python3
deps = -rdocs/requirements.txt
commands = sphinx-build -q -b linkcheck -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/linkcheck

[testenv:checkbashisms]
deps =
whitelist_externals = sh
                      checkbashisms
                      sudo
                      find
commands =
    sh -c 'command checkbashisms>/dev/null || sudo yum install devscripts-minimal || (echo "checkbashisms command not found - please install it (e.g. sudo apt-get install devscripts | yum install devscripts-minimal )" >&2 && exit 1)'
    find . -not -path '*/\.*' -name *.sh -exec checkbashisms -f  \{\} +

[testenv:spelling]
basepython = python3
deps =
    -rdocs/requirements.txt
    sphinxcontrib-spelling
    PyEnchant
commands = sphinx-build -b spelling  -d {envtmpdir}/doctrees ../docs/ {toxinidir}/docs/_build/spelling

[testenv:autopep8]
basepython = python3
deps = autopep8
commands =
    autopep8 --max-line-length 120 --in-place --recursive transportpce_tests/

[testenv:pylint]
basepython = python3
deps = pylint
whitelist_externals = find
commands =
    find transportpce_tests/ -name *.py -exec pylint --max-line-length=120 --disable=missing-docstring --method-rgx="(([a-z_][a-zA-Z0-9_]{2,})|(_[a-z0-9_]*)|(__[a-zA-Z][a-zA-Z0-9_]+__))$" --variable-rgx="[a-zA-Z_][a-zA-Z0-9_]{1,30}$" --reports=y --score=y  --output-format=colorized  \{\} +

[testenv:pyang]
basepython = python3
deps = pyang
whitelist_externals = find
commands =
    pyang --version
    find ../api/ -name target -prune -o -name *.yang -exec pyang --lint --canonical --max-line-length=120 -p../api/src/main/yang/:../ordmodels/common/src/main/yang/:../ordmodels/service/src/main/yang/:../tapimodels/src/main/yang/ \{\} +
#find ../api/ ../ordmodels/ ../tapimodels/ -name target -prune -o -name *.yang -exec pyang --lint --canonical --max-line-length=120 -p../api/src/main/yang/:../ordmodels/common/src/main/yang/:../ordmodels/service/src/main/yang/:../tapimodels/src/main/yang/ \{\} +

[testenv:pyangformat]
basepython = python3
deps = pyang
whitelist_externals = sh
commands =
    pyang --version
    sh -c 'find ../api/ -name target -prune -o -name *.yang -print | while read -r fname; do pyang -f yang --yang-canonical --yang-remove-unused-imports --max-line-length=120 --keep-comments -p../api/src/main/yang/:../ordmodels/common/src/main/yang/:../ordmodels/service/src/main/yang/:../tapimodels/src/main/yang/ "$fname"  -o /tmp/tmpfile.$$ && mv /tmp/tmpfile.$$ "$fname";done'

[testenv:pre-commit-install]
basepython = python3
deps = pre-commit
commands =
    pre-commit install
    pre-commit install --hook-type commit-msg

[testenv:pre-commit-uninstall]
basepython = python3
deps = pre-commit
commands =
    pre-commit uninstall
    pre-commit uninstall --hook-type commit-msg

[testenv:pre-commit]
basepython = python3
deps = pre-commit
passenv = HOME
commands =
    pre-commit run --all-files --show-diff-on-failure
    pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG
    # Gitlint only proposes a pre-commit configuration for the commit-msg stage but none for the commit stage.
    # Its default arguments --passed and --msg-filename are different from CI recommandations.
    # As a result, the line above is always skipped in jenkins CI since there cannot be a .git/COMMIT_EDITMSG file.
    # A dedicated gitlint profile for CI is proposed below. Also to behave fine locally, this profile must have access
    # to the HOME variable so that Gitlint can retrieve Git user settings.

[testenv:gitlint]
basepython = python3
deps = gitlint
commands =
    gitlint

