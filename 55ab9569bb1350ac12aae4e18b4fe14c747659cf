{
  "comments": [
    {
      "key": {
        "uuid": "1b58007b_9ee448fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-11T12:13:27Z",
      "side": 1,
      "message": "lielength \u003e72 characters",
      "range": {
        "startLine": 10,
        "startChar": 2,
        "endLine": 10,
        "endChar": 76
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7adf2673_9abf7a62",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/gnpy/utils/AToZComparator.java",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-11T09:05:14Z",
      "side": 1,
      "message": "is it useful ?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c93e25e9_34f26b7b",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/gnpy/utils/AToZComparator.java",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 8630
      },
      "writtenOn": "2020-09-11T09:39:50Z",
      "side": 1,
      "message": "http://blog.paumard.org/cours/java/chap10-entrees-sorties-serialization.html",
      "parentUuid": "7adf2673_9abf7a62",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0491dc4e_6fd75715",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/gnpy/utils/AToZComparator.java",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-14T13:25:00Z",
      "side": 1,
      "message": "Even this is a strong recommandation (at least since Java 5), this rule is not set in stone.\nNote it has a little evolved between Java versions 5 and 7 to provide developers with more details.\n\nFrom what I understand, this is \"dirty magic\" to palliate what is clearly a language design flaw.\nIn most languages, this constant should normally not be forced, moreover it is private.\nIn java, it is only mandatory in some tricky situations that occurs when several compilers with incompatible implementations are used.\nhttp://www.touilleur-express.fr/2008/01/26/serialversionuid-mythes-et-legendes/\nhttps://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\n\nUsing it in other situations mostly work, what explains the existence of this generic (and lazy) recommendation.\nThough, developers opinions are shared on the necessity to fill it systematically.\nsince practically, there is very few cases today when this is really needed.\nTo quote them, mainly RMI-like client-server communications and data object persistence into files.\nhttps://stackoverflow.com/questions/21562525/what-is-a-serial-version-uid-used-for\nhttp://apache-wicket.1842946.n4.nabble.com/serialVersionUID-td1879689.html\n\nThis is clearly not the case here since this is a private method only used by a class inside the same bundle.\nThus, there is no chance compilers incompatibility affect this portion of code.\n\nAlso, factually, filling it  exposes to other (more serious) problems:\n- it can raise other SONAR alarms.\nhttps://rules.sonarsource.com/java/RSPEC-4926\nhttps://git.opendaylight.org/gerrit/c/vtn/+/1393/1/manager/api/src/main/java/org/opendaylight/vtn/manager/MacAddressEntry.java\n- it means that you explictly want to manage the class versioning.\nFrom my opinion, this is not what we want to do here \nand if so, using hashes generated by IDE makes this task more complex.\nUsing classical increments is probably better as done here.\nhttps://git.opendaylight.org/gerrit/c/controller/+/12649/\nForgetting to maintain the version in that case may expose to future incompatibility issues harder to troubleshoot.\n\nFor more details, I completely share the analysis on the URLs below.\nhttps://github.com/rzwitserloot/lombok/wiki/WHY-NOT:-serialVersionUID\nhttps://moi.vonos.net/java/serialization-synthetic/\nPersistence is better achieved  today with other serialization means (JACKSON, etc)\nRMI should not be used anymore with serialization even if it was very popular before.\nEven Oracle and the original author of Java serializer admit it today.\nhttps://www.infoworld.com/article/3275924/oracle-plans-to-dump-risky-java-serialization.html\nSince the probability to bump into this is now very weak, generalizing its usage should not be recommended anymore.\n\n\nI noticed I have already reported a similar comment in a previous change:\nhttps://git.opendaylight.org/gerrit/c/transportpce/+/92130/4/common/src/main/java/org/opendaylight/transportpce/common/openroadminterfaces/OpenRoadmInterfaceException.java\n(though the conclusion on this field usefulness there is less immediate)\n\nFrom what I understand, this field was not present before and was added there because of a new SpotBug rule that appeared with the odparent upgrade to aluminium\nThis would have deserved an explicit mention in a code / commit message / gerrit comment or\na separate change such as https://git.opendaylight.org/gerrit/c/transportpce/+/85887\nThis way, potential reviewers can immediately catch where this constant come from.\n\nSpotBugs is there to catch the developer attention on potential problems and can raise false positive.\nNote the underlying SB/FB rule do not conclude on the strict necessity of this fields and ends with a prudent sentence\n\"To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.\"\nhttp://findbugs.sourceforge.net/bugDescriptions.html#SE_NO_SERIALVERSIONID\n\nThus, I think it is better here to ignore this warning with a @FBSuppressWarning on the class rather than forcing the serialVersionUID.",
      "parentUuid": "c93e25e9_34f26b7b",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6539634e_72373ecd",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/gnpy/utils/ZToAComparator.java",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-11T09:05:14Z",
      "side": 1,
      "message": "is it useful ?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34593cfb_bc2ddb98",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/gnpy/utils/ZToAComparator.java",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 8630
      },
      "writtenOn": "2020-09-11T09:39:50Z",
      "side": 1,
      "message": "http://blog.paumard.org/cours/java/chap10-entrees-sorties-serialization.html",
      "parentUuid": "6539634e_72373ecd",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcd98f70_dec572f9",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/networkanalyzer/MapUtils.java",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-11T09:05:14Z",
      "side": 1,
      "message": "reversing the logic here would ease the reading\n\n        if (!supportingLinkIterator.hasNext()) {\n            return \"\";\n        }\n        SupportingLink first \u003d supportingLinkIterator.next();\n        if (first \u003d\u003d null || first.getLinkRef() \u003d\u003d null) {\n            return \"\";\n        }\n        return first.getLinkRef().toString();",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 157,
        "endChar": 9
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6dfc389_870e98b3",
        "filename": "pce/src/main/java/org/opendaylight/transportpce/pce/networkanalyzer/PceLink.java",
        "patchSetId": 9
      },
      "lineNbr": 181,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-11T09:05:14Z",
      "side": 1,
      "message": "reversing the logic is more efficient here\n\n        if (this.omsAttributesSpan \u003d\u003d null) {\n            return 0L;\n        }\n        Collection\u003cLinkConcatenation\u003e linkConcatenationList \u003d\n            this.omsAttributesSpan.nonnullLinkConcatenation().values();\n        if (linkConcatenationList \u003d\u003d null) {\n            LOG.error(\"in PceLink : Null field in the OmsAttrubtesSpan\");\n            return 0L;\n        }\n\n        Iterator\u003cLinkConcatenation\u003e linkConcatenationiterator \u003d linkConcatenationList.iterator();\n        if (!linkConcatenationiterator.hasNext()) {\n            return 0L;\n        }\n        // power on the output of the previous ROADM (dBm)\n        double pout \u003d retrievePower(linkConcatenationiterator.next().getFiberType());\n        // span loss (dB)\n        double spanLoss \u003d this.omsAttributesSpan.getSpanlossCurrent().getValue().doubleValue();\n        double pin \u003d pout - spanLoss; // power on the input of the current ROADM (dBm)\n        double spanOsnrDb \u003d NOISE_MASK_A * pin + NOISE_MASK_B;\n        if (spanOsnrDb \u003e UPPER_BOUND_OSNR) {\n            spanOsnrDb \u003d UPPER_BOUND_OSNR;\n        } else if (spanOsnrDb \u003c LOWER_BOUND_OSNR) {\n            spanOsnrDb \u003d LOWER_BOUND_OSNR;\n        }\n        return spanOsnrDb;",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 181,
        "endChar": 26
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "481a8289_16fdaa6a",
        "filename": "pce/src/main/resources/OSGI-INF/blueprint/pce-blueprint.xml",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 6731
      },
      "writtenOn": "2020-09-11T08:26:21Z",
      "side": 1,
      "message": "I think this affects the lighty config too.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 125
      },
      "revId": "55ab9569bb1350ac12aae4e18b4fe14c747659cf",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": true
    }
  ]
}