{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c5918814_8bb00857",
        "filename": "tapi/src/main/java/org/opendaylight/transportpce/tapi/topology/ConvertORToTapiTopology.java",
        "patchSetId": 1
      },
      "lineNbr": 974,
      "author": {
        "id": 6731
      },
      "writtenOn": "2024-03-15T07:49:54Z",
      "side": 1,
      "message": "indent +4 here so that setters are not aligned with the builder declaration",
      "revId": "e210ffa651fea5af090bffc3441aabb09a40b197",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8a96f01_105e076a",
        "filename": "tapi/src/main/java/org/opendaylight/transportpce/tapi/topology/ConvertORTopoToTapiFullTopo.java",
        "patchSetId": 1
      },
      "lineNbr": 318,
      "author": {
        "id": 6731
      },
      "writtenOn": "2024-03-15T07:49:54Z",
      "side": 1,
      "message": "argument alignment with roadmNoade declaration is congusing IMO\n\nwhat about this rather ?\n\n        org.opendaylight.yang.gen.v1.urn.onf.otcc.yang.tapi.topology.rev221121.topology.Node roadmNode \u003d\n            createRoadmTapiNode(nodeUuid, Map.of(\n                    nodeName.key(), nodeName, nameNodeType.key(), nameNodeType), layerProtocols, oneMap, \"Abstracted\");\n                    \n                    \nor this ?\n\n        org.opendaylight.yang.gen.v1.urn.onf.otcc.yang.tapi.topology.rev221121\n                .topology.Node roadmNode \u003d\n            createRoadmTapiNode(\n                nodeUuid,\n                Map.of(\n                    nodeName.key(), nodeName, nameNodeType.key(), nameNodeType), layerProtocols, oneMap, \"Abstracted\");",
      "revId": "e210ffa651fea5af090bffc3441aabb09a40b197",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum vote is required for the \u0027Code-Review\u0027 label. \t\t\tA minumum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e210ffa651fea5af090bffc3441aabb09a40b197",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "A maximum \u0027Verified\u0027 vote from \u0027ODL Required.GHA\u0027 and one other CI or committer is required for the \u0027Verified\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX,count\u003e\u003d2 AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX,count>=2 AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX,count>=2"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e210ffa651fea5af090bffc3441aabb09a40b197",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}