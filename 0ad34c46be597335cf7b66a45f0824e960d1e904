{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9086fa58_9e139702",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6731
      },
      "writtenOn": "2023-01-08T16:28:45Z",
      "side": 1,
      "message": "recheck",
      "revId": "0ad34c46be597335cf7b66a45f0824e960d1e904",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d6af92a_dc213267",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7217
      },
      "writtenOn": "2023-01-13T10:33:50Z",
      "side": 1,
      "message": "Thanks Guillaume for your proposal. \nThere are several things that I don’t really understand.\n1st I think the commit is not really well formatted because it does not really reflect the content of the change, Log messages being only one of some multiple other modifications.\nCatalogUtils : You propose to extract some changes that you feel will improve the code and can be backported. But I just would like to remind that CatalogUtils is until now absolutely not used. It is just preliminary work to reach the goal of having impairment awareness in PCE. So what is the point in backporting some improvement on code that is not used \nPceOpticalNode : most of what you propose to backport is associated with indentation and just add value for reviewing code. What is the benefit of backporting it on some code that won’t be reviewed anymore because it is already merged? The only real modification (line 274), IMHO shall not be backported. It is there because we need tp type in the case of impairment awareness path computation. Before I guess we were note absolutely needing it. So we will generate errors for something that we may not need.\nMapUtils : Cosmetic to me and not really needed…\nPceGraph: The only that really makes sense which I changed because you asked me to modify it whereas I did not write this part of the code ;-) \n",
      "revId": "0ad34c46be597335cf7b66a45f0824e960d1e904",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4322b3af_e579241b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7217
      },
      "writtenOn": "2023-01-13T10:46:19Z",
      "side": 1,
      "message": "According to my comment I guess it should not be merged. Notably because of PceOticalNode",
      "revId": "0ad34c46be597335cf7b66a45f0824e960d1e904",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73e3debb_86aadbba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6731
      },
      "writtenOn": "2023-01-13T10:57:10Z",
      "side": 1,
      "message": "You are welcome.\nPlease can you be more precise on the modifications out of scope of the title ?\nI am fine to rework the commit message to better reflect them if you think it is worth to do it.\n\nAbout the fact that CatalogUtils may be unused in other branches,  most of the files modified here, if not all, are nonetheless present on the other branches.\nAs a result, their modifications can generate merge conflicts that will make stable branches maintenance more complex, whether they are used or not by a feature.\nHere is a pointer about how these merge conflicts happen https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts.\n\nThis is also true with indentation issues and any kind of modification.\nThe more the files differ, the more Git will have difficulties to automatically deals with merge conflicts resolution. And the more, we will have to deal manually with them.\nAs reminder, here is OpenStack official position on the topic.\nhttps://wiki.openstack.org/wiki/GitCommitMessages#Things_to_avoid_when_creating_commits\n\nHope this helps",
      "parentUuid": "8d6af92a_dc213267",
      "revId": "0ad34c46be597335cf7b66a45f0824e960d1e904",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8192870d_4d21cfb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7217
      },
      "writtenOn": "2023-01-13T13:09:44Z",
      "side": 1,
      "message": "Refactor log messages IMHO means you change a LOG level or LOG message content. Here we sometime generate LOG that were not existing (CatalogUtils), remove some duplicated conditions which results in LOG modifications (PceGraph), handle potential failure case and add corresponding LOG (MapUtils/PceOpticalNode). The only modification I see corresponding to the commit message is the one of line 95 of PceOpticalNode, where we just add the Id of the node to clarify the message.\n \nAt the end Impairment aware path computation is only for Argon, where all the change 103663 will be applied. It will not be applied to other branches. Indeed everything for Cl SR2 must be ready by the end of next week and 103663 will not be ready since its functional review may take more time. So I may miss something, but as soon as this change will be merged, all corresponding modifications will apply, and only on Argon. I don’t understand then why we should experience conflicts on other branches. \n",
      "revId": "0ad34c46be597335cf7b66a45f0824e960d1e904",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d14f60b8_e1a9c43c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6731
      },
      "writtenOn": "2023-01-13T14:14:35Z",
      "side": 1,
      "message": "I concour this is not related directly to the log message contents but their management. Would \"Refactor LOG message management\" be more appropiate as a title ?\n\nWith so many files spread on 4 bundles in 103663, I don\u0027t think it is possible to anticipate all cases where a merge conflict can occur. But you can already look at the merge conflicts already present on this change 103663 and see there are already potentially 8, with some changes related to completely different issues than CatalogsUtils.\nAs I state, merge conflicts are not related to a feature but to files modified.\nCan you guarantee all the files listed here won\u0027t be modified again in the stable branches ? Personnaly I won\u0027t.",
      "parentUuid": "8192870d_4d21cfb6",
      "revId": "0ad34c46be597335cf7b66a45f0824e960d1e904",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81"
    }
  ]
}